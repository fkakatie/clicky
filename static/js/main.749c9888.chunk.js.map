{"version":3,"sources":["components/Header/index.js","components/Image/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Image","src","alt","data-id","id","data-clicked","clicked","onClick","handleClick","Game","state","images","currentScore","wins","shuffle","i","length","j","Math","floor","random","temp","console","log","clickedImages","_this","map","image","badClick","goodClick","setState","checkIfWin","winGame","this","prevProps","prevState","alert","resetGame","resetImages","_this2","components_Image","key","Component","App","components_Header","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.749c9888.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// this needs to be a class!\r\nconst Header = (props) => {\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <h1>This is the title.</h1>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Image = (props) => {\r\n\r\n    return (\r\n        <img className=\"character-image\"\r\n            src={props.src}\r\n            alt={props.alt}\r\n            data-id={props.id} \r\n            data-clicked={props.clicked}\r\n            onClick={() => props.handleClick(props.id, props.alt)}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\r\nimport Image from '../Image';\r\nimport images from '../../images.json';\r\n\r\nclass Game extends Component {\r\n\r\n    state = {\r\n        images,\r\n        currentScore: 0,\r\n        wins: 0\r\n    }\r\n\r\n    shuffle = images => {\r\n        for (var i = (images.length - 1); i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = images[i];\r\n            images[i] = images[j];\r\n            images[j] = temp;\r\n        }\r\n        return images;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ \r\n            images: this.shuffle(this.state.images) \r\n        });\r\n    }\r\n\r\n    handleClick = (id, alt) => {\r\n        console.log('clicked', id, alt);\r\n        const clickedImages = this.state.images.map(image => {\r\n            if (image.id === id) { \r\n                image.clicked === true ? \r\n                    this.badClick(image) :\r\n                    this.goodClick(image);\r\n            }\r\n            // console.log(image.alt, image.clicked);\r\n            return image;\r\n        });\r\n        // console.log(clickedImages);\r\n        this.setState({ \r\n            images: this.shuffle(clickedImages) \r\n        });\r\n    }\r\n\r\n    // if image HAS NOT BEEN CLICKED\r\n    goodClick(image) {\r\n        // console.log('good click');\r\n        image.clicked = true;\r\n        //console.log(image.alt, image.clicked);\r\n        this.setState({ \r\n            currentScore: this.state.currentScore + 1 \r\n        });\r\n        // console.log(this.state.currentScore);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(prevState);\r\n        if (prevState.currentScore !== this.state.currentScore) {\r\n            this.checkIfWin();\r\n        }\r\n    }\r\n\r\n    // if image HAS BEEN CLICKED\r\n    badClick(image) {\r\n        // console.log('bad click');\r\n        alert('You already selected ' + image.alt);\r\n        this.resetGame();\r\n    }\r\n\r\n    checkIfWin = () => {\r\n        console.log(this.state.currentScore, images.length);\r\n        if (this.state.currentScore === (images.length)) {\r\n            this.winGame();\r\n        }\r\n    }\r\n\r\n    // all images HAVE BEEN CLICKED\r\n    winGame() {\r\n        // console.log(this.state.currentScore, images.length);\r\n        if (this.state.currentScore === images.length) {\r\n            console.log('win game');\r\n            this.setState({ \r\n                wins: this.state.wins + 1 \r\n            }, this.resetGame());\r\n            \r\n        }\r\n    }\r\n\r\n    // starts game all over again\r\n    resetGame() {\r\n        console.log('reset game');\r\n        const resetImages = this.state.images.map(image => {\r\n            image.clicked = false;\r\n            // console.log(image.alt, image.clicked);\r\n            return image;\r\n        })\r\n        this.setState({ \r\n            currentScore: 0,\r\n            images: this.shuffle(resetImages) \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div className=\"container\">\r\n                    <p>Current Score: {this.state.currentScore}/25</p>\r\n                    <p>Wins: {this.state.wins}</p>\r\n                </div>\r\n                <div className=\"container character-container\">\r\n                    {\r\n                        this.state.images.map(image => {\r\n                            return (\r\n                                <Image\r\n                                    key={image.id} \r\n                                    id={image.id}\r\n                                    src={image.src}\r\n                                    alt={image.alt}\r\n                                    handleClick={this.handleClick}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Game from './components/Game';\nimport './App.css';\nimport './components/reset.css'\nimport './components/component.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        \n        <Header />\n\n        <Game />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Instructions/index.js","components/Image/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","props","react_default","a","createElement","className","class","Image","difficulty","src","alt","data-id","id","data-clicked","clicked","onClick","handleClick","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setDifficulty","event","setState","target","value","renderDifficulty","state","oneDiffImages","images","filter","image","series","includes","shuffle","outOf","length","twoDiffImages","threeDiffImages","fourDiffImages","i","j","Math","floor","random","temp","clickedImages","map","badClick","goodClick","checkIfWin","currentScore","winGame","modalShow","wins","prevProps","prevState","alert","resetGame","resetImages","_this2","href","onChange","components_Instructions","components_Image","key","Component","App","chosen","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36c81f8a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// this needs to be a className!\r\nconst Instructions = (props) => {\r\n    return (\r\n        <div className=\"instructions-box\">\r\n            <div className=\"banner\">\r\n                <i class=\"fas fa-book-open\"></i>Instructions\r\n            </div>\r\n            <p>\r\n                In Super Smash Bros. React, each Super Smash character is displayed. Select each unique fighter to earn points, but only click each fighter once!\r\n            </p>\r\n\r\n            <p>\r\n                If you select the same fighter twice in a single game, you lose. Challenge yourself to a rematch!\r\n            </p>\r\n\r\n            <p>\r\n                If you select each unique fighter only once in a single game, you win! Become the ultimate champion!\r\n            </p>\r\n\r\n            <p>\r\n                Start with 64 and work your way up to Ultimate. The greater the intensity, the greater the challenge! \r\n            </p>\r\n            \r\n            <p>    \r\n                Choose your game from the dropdown above to begin...\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\r\n\r\nconst Image = (props) => {\r\n\r\n    return (\r\n        <img className={\"character-image \" + (\r\n                props.difficulty === \"1\" || props.difficulty === \"2\" ? 'big' : \r\n                    props.difficulty === \"3\" ? 'medium' : 'small' \r\n            )}\r\n            src={props.src}\r\n            alt={props.alt}\r\n            data-id={props.id} \r\n            data-clicked={props.clicked}\r\n            onClick={() => props.handleClick(props.id, props.alt)}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default Image;","import React, { Component } from 'react';\r\nimport Instructions from '../Instructions';\r\nimport Image from '../Image';\r\nimport images from '../../images.json';\r\n\r\nclass Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            images,\r\n            modalShow: true,\r\n            difficulty: \"0\",\r\n            outOf: images.length,\r\n            currentScore: 0,\r\n            wins: 0\r\n        }\r\n    }\r\n\r\n    setDifficulty = (event) => {\r\n        this.setState({\r\n            difficulty: event.target.value\r\n        }, this.renderDifficulty());\r\n        // console.log(this.state.difficulty);\r\n    }\r\n\r\n    renderDifficulty = () => {\r\n        if (this.state.difficulty === \"1\") {\r\n            const oneDiffImages = images.filter(image => image.series.includes('64') );\r\n            this.setState({\r\n                images: this.shuffle(oneDiffImages),\r\n                outOf: oneDiffImages.length\r\n            });\r\n        } else if (this.state.difficulty === \"2\") {\r\n            const twoDiffImages = images.filter(image => image.series.includes('melee') );\r\n            this.setState({\r\n                images: this.shuffle(twoDiffImages),\r\n                outOf: twoDiffImages.length\r\n            });\r\n        } else if (this.state.difficulty === \"3\") {\r\n            const threeDiffImages = images.filter(image => image.series.includes('brawl') );\r\n            this.setState({\r\n                images: this.shuffle(threeDiffImages),\r\n                outOf: threeDiffImages.length\r\n            });\r\n        } else if (this.state.difficulty === \"4\") {\r\n            const fourDiffImages = images.filter(image => image.series.includes('wiiu') );\r\n            this.setState({\r\n                images: this.shuffle(fourDiffImages),\r\n                outOf: fourDiffImages.length\r\n            });\r\n        } else if (this.state.difficulty === \"5\") {\r\n            this.setState({\r\n                images: this.shuffle(images),\r\n                outOf: images.length\r\n            });\r\n        }\r\n    }\r\n\r\n    shuffle = images => {\r\n        for (var i = (images.length - 1); i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = images[i];\r\n            images[i] = images[j];\r\n            images[j] = temp;\r\n        }\r\n        return images;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.renderDifficulty();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // console.log(prevState);\r\n        if (prevState.currentScore !== this.state.currentScore) {\r\n            this.checkIfWin();\r\n        }\r\n        if (prevState.difficulty !== this.state.difficulty) {\r\n            this.renderDifficulty();\r\n        }\r\n        if (prevState.wins !== this.state.wins) {\r\n            alert(\"You win!\\nYou've won \" + this.state.wins + \" games.\")\r\n            this.resetGame();\r\n        }\r\n    }\r\n\r\n    handleClick = (id, alt) => {\r\n        // console.log(id, alt);\r\n        const clickedImages = this.state.images.map(image => {\r\n            if (image.id === id) {\r\n                image.clicked === true ?\r\n                    this.badClick(image) :\r\n                    this.goodClick(image);\r\n            }\r\n            // console.log(image.alt, image.clicked);\r\n            return image;\r\n        });\r\n        // console.log(clickedImages);\r\n        this.setState({\r\n            images: this.shuffle(clickedImages)\r\n        });\r\n    }\r\n\r\n    // if image HAS NOT BEEN CLICKED\r\n    goodClick(image) {\r\n        // console.log('good click');\r\n        image.clicked = true;\r\n        //console.log(image.alt, image.clicked);\r\n        this.setState({\r\n            currentScore: this.state.currentScore + 1\r\n        });\r\n        // console.log(this.state.currentScore);\r\n    }\r\n\r\n    // if image HAS BEEN CLICKED\r\n    badClick(image) {\r\n        // console.log('bad click');\r\n        alert('You already selected ' + image.alt + \".\\nYou lost!\");\r\n        this.resetGame();\r\n    }\r\n\r\n    checkIfWin = () => {\r\n        // console.log(this.state.currentScore, this.state.outOf);\r\n        if (this.state.currentScore === (this.state.outOf)) {\r\n            this.winGame();\r\n        }\r\n    }\r\n\r\n    // all images HAVE BEEN CLICKED\r\n    winGame() {\r\n        // console.log(this.state.currentScore, this.state.outOf);\r\n        // console.log('win game');\r\n        this.setState({\r\n            wins: this.state.wins + 1\r\n        }, this.resetGame());\r\n    }\r\n\r\n    // starts game all over again\r\n    resetGame() {\r\n        // console.log('reset game');\r\n        const resetImages = this.state.images.map(image => {\r\n            image.clicked = false;\r\n            // console.log(image.alt, image.clicked);\r\n            return image;\r\n        })\r\n        this.setState({\r\n            currentScore: 0,\r\n            images: this.shuffle(resetImages)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <div className=\"container\">\r\n                        <div className=\"parallelograms\">\r\n                            <a className=\"parallelogram back\" href=\"http://fkakatie.github.io\" target=\"_blank\">\r\n                                <i className=\"fas fa-arrow-left\"></i>\r\n                            </a>\r\n                            <a className=\"parallelogram instructions\" href=\"https://fkakatie.github.io/clicky\" target=\"_blank\">\r\n                                <i className=\"fas fa-book\"></i>\r\n                            </a>\r\n                        </div>\r\n                        <div className=\"dropbox\">\r\n                            <div className=\"left\"></div>\r\n                            <div className=\"dropdown\">\r\n                                <select id=\"difficulty\" onChange={this.setDifficulty} value={this.state.difficulty}>\r\n                                    <option value=\"0\">Select Game:</option>\r\n                                    <option value=\"1\">64</option>\r\n                                    <option value=\"2\">Melee</option>\r\n                                    <option value=\"3\">Brawl</option>\r\n                                    <option value=\"4\">Wii U</option>\r\n                                    <option value=\"5\">Ultimate</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"right\"></div>\r\n                        </div>\r\n                        <div className=\"scorebox\">\r\n                            <div className=\"left\"></div>\r\n                            <div className=\"scores\">\r\n                                <p>\r\n                                    Score&nbsp;<span className=\"arrow\">⯇</span>\r\n                                    <strong>{this.state.currentScore}</strong>/<strong>{this.state.outOf}</strong>\r\n                                    <span className=\"arrow\">⯈</span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"right\"></div>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <section>\r\n                    <div className=\"container character-container\">\r\n                        {   \r\n                            this.state.difficulty === \"0\" ?\r\n                                <Instructions /> :\r\n                                this.state.images.map(image => {\r\n                                    return (\r\n                                        <Image\r\n                                            key={image.id}\r\n                                            id={image.id}\r\n                                            src={image.src}\r\n                                            alt={image.alt}\r\n                                            handleClick={this.handleClick}\r\n                                            difficulty={this.state.difficulty}\r\n                                        />\r\n                                    )\r\n                                })\r\n                        }\r\n                    </div>\r\n                </section>\r\n                {/* <div className=\"modal\">\r\n                    abc\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './components/Game';\nimport './App.css';\nimport './components/reset.css'\nimport './components/component.css';\n\nclass App extends Component {\n\n  state = {\n    chosen: false\n  }\n\n  render() {\n    return (\n      <div>\n\n        <Game />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}